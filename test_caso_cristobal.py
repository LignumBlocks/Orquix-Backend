#!/usr/bin/env python3
"""
Script de prueba espec√≠fico para el caso de Crist√≥bal Col√≥n.
"""

import asyncio
import os
import sys

# Agregar el directorio backend al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from app.services.context_manager import ContextManager
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from app.core.config import settings

async def test_cristobal_case():
    """Prueba espec√≠fica del caso de Crist√≥bal Col√≥n"""
    
    engine = create_async_engine(settings.DATABASE_URL, echo=False)
    session = AsyncSession(engine)
    
    context_manager = ContextManager(session)
    
    # Simular el caso real del usuario
    queries = [
        ("¬øCu√°l es la tierra m√°s hermosa que ojos humanos hayan visto?", "Primera consulta independiente"),
        ("Tiene esto algo que ver con Crist√≥bal Col√≥n", "Segunda consulta con referencia impl√≠cita 'esto'")
    ]
    
    print("üß≠ Caso Crist√≥bal Col√≥n - An√°lisis de consultas:")
    print("=" * 60)
    
    for query, description in queries:
        needs_history = context_manager._query_needs_history(query)
        status = "üîç NECESITA HISTORIAL" if needs_history else "‚úÖ INDEPENDIENTE"
        
        print(f"\n{status}")
        print(f"Query: '{query}'")
        print(f"Descripci√≥n: {description}")
        print(f"Detecci√≥n: {needs_history}")
        
        # Mostrar patrones detectados
        query_lower = query.lower().strip()
        patterns_found = []
        
        implicit_patterns = [
            "√∫ltimos", "primeros", "anteriores", "previos",
            "eso", "esto", "esos", "estas", "aquello", "lo que",
            "el que", "la que", "los que", "las que",
            "antes", "despu√©s", "luego", "ahora", "ya",
            "mejora", "cambia", "modifica", "ajusta", "corrige",
            "ampl√≠a", "resume", "explica", "detalla",
            "los 4", "las 5", "los 3", "dame 2",
            "mejor", "peor", "similar", "parecido", "como",
            "resultado", "respuesta", "lo anterior", "arriba"
        ]
        
        for pattern in implicit_patterns:
            if pattern in query_lower:
                patterns_found.append(pattern)
        
        if patterns_found:
            print(f"Patrones encontrados: {patterns_found}")
        
        # Verificar si es query corta
        words = query.split()
        if len(words) <= 3:
            interrogative_words = ["qu√©", "que", "c√≥mo", "como", "cu√°ndo", "cuando", "d√≥nde", "donde", "por", "para", "qui√©n", "quien"]
            first_word = words[0].lower().strip("¬ø?")
            is_interrogative = first_word in interrogative_words
            print(f"Query corta ({len(words)} palabras): Primera palabra '{first_word}' {'ES' if is_interrogative else 'NO ES'} interrogativa")
    
    await session.close()

async def test_enrichment_simulation():
    """Simula c√≥mo se ver√≠a el enriquecimiento"""
    
    print("\n" + "=" * 60)
    print("üîÑ Simulaci√≥n de enriquecimiento:")
    print("=" * 60)
    
    # Historial simulado de la conversaci√≥n
    mock_history = [
        {
            "user_prompt": "¬øCu√°l es la tierra m√°s hermosa que ojos humanos hayan visto?",
            "moderator_response": "Bas√°ndome en las respuestas de m√∫ltiples IAs, las tierras m√°s hermosas incluyen:\n\n1. **Santorini, Grecia** - Con sus casas blancas y mar azul\n2. **Maldivas** - Aguas cristalinas y atolones\n3. **Alpes Suizos** - Paisajes monta√±osos espectaculares\n4. **Jamaica** - Playas de arena blanca\n5. **Patagonia** - Paisajes v√≠rgenes y glaciares",
            "timestamp": "2024-01-20T15:30:00"
        }
    ]
    
    engine = create_async_engine(settings.DATABASE_URL, echo=False)
    session = AsyncSession(engine)
    context_manager = ContextManager(session)
    
    # Formatear el historial
    formatted_history = context_manager.format_conversation_history(mock_history, max_total_tokens=600)
    
    # Query original
    original_query = "Tiene esto algo que ver con Crist√≥bal Col√≥n"
    
    # Query enriquecida
    enriched_query = f"{formatted_history}Nueva pregunta: {original_query}"
    
    print("QUERY ORIGINAL:")
    print(f"'{original_query}'")
    print("\nQUERY ENRIQUECIDA:")
    print("-" * 40)
    print(enriched_query)
    print("-" * 40)
    
    print("\nüí° Con este contexto, las IAs podr√≠an responder:")
    print("   'S√≠, la frase sobre \"la tierra m√°s hermosa que ojos humanos hayan visto\"")
    print("   es atribuida a Crist√≥bal Col√≥n cuando describi√≥ Cuba en sus diarios...")
    
    await session.close()

async def main():
    """Funci√≥n principal"""
    print("üß≠ An√°lisis del caso Crist√≥bal Col√≥n\n")
    
    try:
        await test_cristobal_case()
        await test_enrichment_simulation()
        
        print("\n‚úÖ An√°lisis completado!")
        
    except Exception as e:
        print(f"‚ùå Error durante el an√°lisis: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 
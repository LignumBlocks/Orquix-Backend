#!/usr/bin/env python3
"""
Script de prueba para la funcionalidad de historial conversacional.
"""

import asyncio
import os
import sys
from uuid import UUID

# Agregar el directorio backend al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from app.services.context_manager import ContextManager
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from app.core.config import settings

async def test_history_detection():
    """Prueba la detecci√≥n de queries que necesitan historial"""
    
    # Crear context manager mock
    engine = create_async_engine(settings.DATABASE_URL, echo=False)
    session = AsyncSession(engine)
    
    context_manager = ContextManager(session)
    
    # Casos de prueba
    test_cases = [
        ("Dame los √∫ltimos 4", True, "Referencias num√©ricas impl√≠citas"),
        ("¬øQu√© es Python?", False, "Pregunta independiente"),
        ("Mejora eso", True, "Referencia impl√≠cita con 'eso'"),
        ("Explica mejor lo anterior", True, "Referencia temporal impl√≠cita"),
        ("Hola", True, "Query muy corta"),
        ("¬øPuedes crear un itinerario de 5 d√≠as por Madrid?", False, "Pregunta completa independiente"),
        ("Cambia el d√≠a 3", True, "Referencia impl√≠cita con modificaci√≥n"),
        ("Resume", True, "Acci√≥n sobre contenido previo")
    ]
    
    print("üß† Testando detecci√≥n de queries que necesitan historial conversacional:")
    print("=" * 70)
    
    for query, expected, reason in test_cases:
        needs_history = context_manager._query_needs_history(query)
        status = "‚úÖ" if needs_history == expected else "‚ùå"
        
        print(f"{status} '{query}'")
        print(f"   Esperado: {expected} | Detectado: {needs_history}")
        print(f"   Raz√≥n: {reason}")
        print()
    
    await session.close()

async def test_history_formatting():
    """Prueba el formateo del historial conversacional"""
    
    engine = create_async_engine(settings.DATABASE_URL, echo=False)
    session = AsyncSession(engine)
    
    context_manager = ContextManager(session)
    
    # Historial simulado
    mock_history = [
        {
            "user_prompt": "Hazme un itinerario de 4 d√≠as por Miami",
            "moderator_response": "Aqu√≠ tienes un itinerario completo para 4 d√≠as en Miami:\n\nD√≠a 1: South Beach y Ocean Drive...\nD√≠a 2: Downtown Miami...",
            "timestamp": "2024-01-20T10:00:00"
        },
        {
            "user_prompt": "¬øQu√© restaurantes me recomiendas?",
            "moderator_response": "Te recomiendo estos restaurantes en Miami:\n1. Joe's Stone Crab\n2. Versailles Restaurant...",
            "timestamp": "2024-01-20T10:05:00"
        }
    ]
    
    formatted = context_manager.format_conversation_history(mock_history, max_total_tokens=800)
    
    print("üìù Historial formateado:")
    print("=" * 50)
    print(formatted)
    
    await session.close()

async def main():
    """Funci√≥n principal de prueba"""
    print("üöÄ Iniciando pruebas de historial conversacional...\n")
    
    try:
        await test_history_detection()
        print("\n" + "="*70 + "\n")
        await test_history_formatting()
        
        print("\n‚úÖ Todas las pruebas completadas!")
        
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 
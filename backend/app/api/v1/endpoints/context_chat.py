import logging
from datetime import datetime
from typing import List, Optional, Dict, Any
from uuid import UUID

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_db
from app.api.v1.endpoints.auth import get_current_user
from app.schemas.auth import SessionUser
from app.crud import context_session as context_crud
from app.models.context_session import (
    ContextChatRequest,
    ContextChatResponse,
    ContextFinalizeRequest,
    ContextMessage,
    ContextSession,
    ContextSessionSummary
)
from app.services.context_builder import context_builder_service

logger = logging.getLogger(__name__)

router = APIRouter()

def require_auth(current_user: Optional[SessionUser] = Depends(get_current_user)) -> SessionUser:
    """Require authentication for protected endpoints."""
    if not current_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authentication required"
        )
    return current_user


@router.post(
    "/projects/{project_id}/context-chat",
    response_model=ContextChatResponse,
    summary="Chat para construcci√≥n de contexto",
    description="Endpoint para chatear y construir contexto antes de enviar a las IAs principales"
)
async def context_chat(
    project_id: UUID,
    request: ContextChatRequest,
    db: AsyncSession = Depends(get_db),
    current_user: SessionUser = Depends(require_auth)
):
    """
    Procesa un mensaje del usuario en la construcci√≥n de contexto.
    
    - Si no hay session_id, crea una nueva sesi√≥n
    - Si hay session_id, contin√∫a la conversaci√≥n existente
    - Usa GPT-3.5 para generar respuestas conversacionales
    """
    try:
        user_id = UUID(current_user.id)  # Convertir string a UUID
        logger.info(f"üí¨ Context chat - Proyecto: {project_id}, Usuario: {user_id}")
        logger.info(f"üí¨ Tipos - project_id: {type(project_id)}, user_id: {type(user_id)}")
        
        # Obtener o crear sesi√≥n
        if request.session_id:
            # Continuar sesi√≥n existente
            # Convertir expl√≠citamente a UUID si viene como string
            session_uuid = request.session_id
            if isinstance(session_uuid, str):
                session_uuid = UUID(session_uuid)
            
            logger.info(f"üîç Buscando sesi√≥n existente: {session_uuid} (tipo: {type(session_uuid)})")
            db_session = await context_crud.get_context_session(db, session_uuid)
            logger.info(f"üìã Sesi√≥n encontrada: {db_session is not None}")
            if db_session:
                logger.info(f"üìã Sesi√≥n details: project_id={db_session.project_id}, user_id={db_session.user_id}, status={db_session.session_status}")
                logger.info(f"üìã Comparaci√≥n project_id: {db_session.project_id} == {project_id} -> {db_session.project_id == project_id}")
                logger.info(f"üìã Comparaci√≥n user_id: {db_session.user_id} == {user_id} -> {db_session.user_id == user_id}")
            if not db_session or db_session.project_id != project_id or db_session.user_id != user_id:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="Sesi√≥n de contexto no encontrada"
                )
        else:
            # Crear nueva sesi√≥n
            db_session = await context_crud.create_context_session(
                db=db,
                project_id=project_id,
                user_id=user_id,
                initial_message=request.user_message
            )
        
        # Convertir a modelo Pydantic para trabajar con el servicio
        session = context_crud.convert_interaction_to_context_session(db_session)
        
        # Procesar mensaje con GPT-3.5
        response = await context_builder_service.process_user_message(
            user_message=request.user_message,
            conversation_history=session.conversation_history,
            current_context=session.accumulated_context
        )
        
        # Actualizar session_id con el real
        response.session_id = db_session.id
        
        # Crear mensajes para actualizar la sesi√≥n
        user_message = ContextMessage(
            role="user",
            content=request.user_message,
            timestamp=datetime.utcnow(),
            message_type="information" if response.message_type == "information" else "question"
        )
        
        ai_message = ContextMessage(
            role="assistant",
            content=response.ai_response,
            timestamp=datetime.utcnow(),
            message_type=response.message_type
        )
        
        # Actualizar sesi√≥n con mensaje del usuario
        await context_crud.update_context_session(
            db=db,
            session=db_session,
            new_message=user_message,
            updated_context=response.accumulated_context
        )
        
        # Actualizar sesi√≥n con respuesta de la IA
        await context_crud.update_context_session(
            db=db,
            session=db_session,
            new_message=ai_message,
            updated_context=response.accumulated_context
        )
        
        logger.info(f"‚úÖ Context chat procesado - Sesi√≥n: {response.session_id}")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error en context chat: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error procesando mensaje: {str(e)}"
        )


@router.get(
    "/projects/{project_id}/context-sessions",
    response_model=List[ContextSessionSummary],
    summary="Listar sesiones de contexto",
    description="Obtiene las sesiones de construcci√≥n de contexto de un proyecto"
)
async def get_context_sessions(
    project_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user: SessionUser = Depends(require_auth)
):
    """
    Obtiene las sesiones de contexto de un proyecto.
    """
    try:
        user_id = UUID(current_user.id)  # Convertir string a UUID
        sessions = await context_crud.get_project_context_sessions(
            db=db,
            project_id=project_id,
            user_id=user_id
        )
        return sessions
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo sesiones de contexto: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error obteniendo sesiones: {str(e)}"
        )


@router.get(
    "/context-sessions/{session_id}",
    response_model=ContextSession,
    summary="Obtener sesi√≥n de contexto",
    description="Obtiene una sesi√≥n de contexto espec√≠fica con todo su historial"
)
async def get_context_session(
    session_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user: SessionUser = Depends(require_auth)
):
    """
    Obtiene una sesi√≥n de contexto espec√≠fica.
    """
    try:
        user_id = UUID(current_user.id)  # Convertir string a UUID
        db_session = await context_crud.get_context_session(db, session_id)
        if not db_session or db_session.user_id != user_id:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Sesi√≥n de contexto no encontrada"
            )
        
        # Convertir a modelo Pydantic para acceder a los campos correctamente
        session_model = context_crud.convert_interaction_to_context_session(db_session)
        return session_model
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo sesi√≥n de contexto: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error obteniendo sesi√≥n: {str(e)}"
        )


@router.post(
    "/context-sessions/{session_id}/finalize",
    summary="Finalizar construcci√≥n de contexto",
    description="Finaliza la construcci√≥n de contexto y env√≠a la consulta a las IAs principales"
)
async def finalize_context_session(
    session_id: UUID,
    request: ContextFinalizeRequest,
    db: AsyncSession = Depends(get_db),
    current_user: SessionUser = Depends(require_auth)
):
    """
    Finaliza la construcci√≥n de contexto y env√≠a la consulta a las IAs principales.
    
    Este endpoint:
    1. Marca la sesi√≥n como finalizada
    2. Toma el contexto acumulado + pregunta final
    3. Lo env√≠a al flujo normal de IAs principales
    """
    try:
        user_id = UUID(current_user.id)  # Convertir string a UUID
        logger.info(f"üèÅ Finalizando sesi√≥n de contexto: {session_id}")
        
        # Obtener y validar sesi√≥n
        db_session = await context_crud.get_context_session(db, session_id)
        if not db_session or db_session.user_id != user_id:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Sesi√≥n de contexto no encontrada"
            )
        
        if db_session.session_status != "active":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="La sesi√≥n ya est√° finalizada"
            )
        
        # Finalizar sesi√≥n
        await context_crud.finalize_context_session(db, session_id)
        
        # TODO: Aqu√≠ se integrar√≠a con el flujo normal de IAs principales
        # Por ahora retornamos informaci√≥n de la finalizaci√≥n
        
        return {
            "message": "Sesi√≥n de contexto finalizada exitosamente",
            "session_id": session_id,
            "accumulated_context": db_session.context_used_summary,
            "final_question": request.final_question,
            "ready_for_ai_processing": True
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error finalizando sesi√≥n de contexto: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error finalizando sesi√≥n: {str(e)}"
        )


@router.get(
    "/projects/{project_id}/active-context-session",
    response_model=ContextSession,
    summary="Obtener sesi√≥n activa",
    description="Obtiene la sesi√≥n de contexto activa para un proyecto"
)
async def get_active_context_session(
    project_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user: SessionUser = Depends(require_auth)
):
    """
    Obtiene la sesi√≥n de contexto activa para un proyecto.
    """
    try:
        user_id = UUID(current_user.id)  # Convertir string a UUID
        db_session = await context_crud.get_active_session_for_project(
            db=db,
            project_id=project_id,
            user_id=user_id
        )
        
        if not db_session:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="No hay sesi√≥n de contexto activa"
            )
        
        session = context_crud.convert_interaction_to_context_session(db_session)
        return session
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo sesi√≥n activa: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error obteniendo sesi√≥n activa: {str(e)}"
        )


@router.post("/context-sessions/{session_id}/generate-ai-prompts")
async def generate_ai_prompts(
    session_id: UUID,
    request: ContextFinalizeRequest,
    current_user: dict = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
) -> Dict[str, Any]:
    """
    Genera los prompts reales usando el servicio ai_moderator.py con meta-an√°lisis profesional.
    """
    logger.info(f"üéØ Generando prompts para IAs usando ai_moderator.py - Sesi√≥n: {session_id}")
    
    try:
        # Verificar que la sesi√≥n existe y pertenece al usuario
        session = await context_crud.get_context_session(db, session_id)
        if not session:
            raise HTTPException(
                status_code=404,
                detail="Sesi√≥n de contexto no encontrada"
            )
        
        user_id = UUID(current_user.id)  # Convertir string a UUID
        if session.user_id != user_id:
            raise HTTPException(
                status_code=403,
                detail="No tienes permiso para acceder a esta sesi√≥n"
            )
        
        # Convertir a modelo Pydantic para acceder a los campos correctamente
        session_model = context_crud.convert_interaction_to_context_session(session)
        
        # Importar el servicio ai_moderator
        from app.services.ai_moderator import AIModerator
        from app.schemas.ai_response import AIRequest, StandardAIResponse, AIResponseStatus, AIProviderEnum
        from app.core.config import settings
        
        # Crear instancia del moderador para acceder a sus prompts profesionales
        moderator = AIModerator()
        
        # Crear respuestas simuladas para usar el sistema de prompts del moderador
        # Esto nos permite acceder a los prompts profesionales sin tener que duplicarlos
        mock_responses = []
        
        if settings.OPENAI_API_KEY:
            mock_responses.append(StandardAIResponse(
                ia_provider_name=AIProviderEnum.OPENAI,
                response_text=f"An√°lisis basado en: {session_model.accumulated_context}. Pregunta: {request.final_question}",
                status=AIResponseStatus.SUCCESS,
                latency_ms=100,
                token_usage={"prompt_tokens": 100, "completion_tokens": 200, "total_tokens": 300},
                request_timestamp=datetime.utcnow(),
                response_timestamp=datetime.utcnow()
            ))
        
        if settings.ANTHROPIC_API_KEY:
            mock_responses.append(StandardAIResponse(
                ia_provider_name=AIProviderEnum.ANTHROPIC,
                response_text=f"Perspectiva alternativa sobre: {session_model.accumulated_context}. Enfoque: {request.final_question}",
                status=AIResponseStatus.SUCCESS,
                latency_ms=120,
                token_usage={"prompt_tokens": 110, "completion_tokens": 180, "total_tokens": 290},
                request_timestamp=datetime.utcnow(),
                response_timestamp=datetime.utcnow()
            ))
        
        if not mock_responses:
            raise HTTPException(
                status_code=500,
                detail="No hay adaptadores de IA configurados"
            )
        
        # Usar el m√©todo _create_synthesis_prompt del moderador para generar el prompt profesional
        synthesis_prompt = moderator._create_synthesis_prompt(mock_responses)
        
        if not synthesis_prompt:
            raise HTTPException(
                status_code=500,
                detail="Error generando prompt de s√≠ntesis profesional"
            )
        
        # Extraer el system message del moderador
        moderator_system_message = "Eres un asistente de meta-an√°lisis objetivo, anal√≠tico y altamente meticuloso. Tu tarea principal es procesar un conjunto de respuestas de m√∫ltiples modelos de IA diversos a una consulta espec√≠fica del investigador. Tu objetivo es generar un reporte estructurado, claro y altamente accionable que ayude al investigador a comprender las perspectivas diversas, identificar puntos de consenso y contradicciones, y definir pasos l√≥gicos y accionables para su investigaci√≥n."
        
        # Generar los prompts profesionales para cada IA
        ai_prompts = {}
        
        # Prompt para OpenAI usando el sistema del moderador
        if settings.OPENAI_API_KEY:
            ai_prompts["openai"] = {
                "provider": "OpenAI GPT-4",
                "model": "gpt-4",
                "system_message": moderator_system_message,
                "user_prompt": synthesis_prompt,
                "parameters": {
                    "max_tokens": 1200,
                    "temperature": 0.3
                }
            }
        
        # Prompt para Anthropic usando el sistema del moderador
        if settings.ANTHROPIC_API_KEY:
            ai_prompts["anthropic"] = {
                "provider": "Anthropic Claude",
                "model": "claude-3-opus-20240229", 
                "system_message": moderator_system_message,
                "user_prompt": synthesis_prompt,
                "parameters": {
                    "max_tokens": 1200,
                    "temperature": 0.3
                }
            }
        
        logger.info(f"‚úÖ Prompts profesionales generados usando ai_moderator.py para {len(ai_prompts)} proveedores")
        
        return {
            "session_id": session_id,
            "ai_prompts": ai_prompts,
            "prompt_type": "ai_moderator_professional",
            "meta_analysis_version": "v2.0"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error generando prompts profesionales: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error generando prompts profesionales: {str(e)}"
        ) 